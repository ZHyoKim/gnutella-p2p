{"name":"P2p-echoer","tagline":"Peer to peer sharing program built on Gnutella protocol. Connections made over TCP and UDP.","body":"\r\nThe program is called Echoer, whose features are described below.\r\n\r\n•\tEchoer takes as arguments a tcp port and a udp port to which it will listen to incoming connection requests and incoming udp packets, respectively:\r\n\t\tjava Echoer <tcp-port> <udp-port>\r\n\r\n•\tEchoer is able to handle up to 7 outgoing tcp connections at the same time. By out-going connection, we mean the connection which this process initiated. Feel free to increase your limit to be more than 7.\r\n\r\n•\tEchoer operates somewhat like a Unix shell. It keeps taking user's commands, at the same time watches incoming connection requests and data packets. When appropriate, Echoer prints out diagnostic information to standard output and then goes back to the prompt mode to accept user's inputs.\r\n\r\n\r\n•\tbelow is a description of all commands Echoer handles, along with the description of associated actions : \r\n\r\no\tinfo: print out its IP address, host name, TCP (listening) port, UDP port. For example:\r\n\tIP address         hostname           udp port      tcp port\r\n\t\r\n\t192.168.0.3 (funny.cse.buffalo.edu)     4892           43444\r\n\r\no\tconnect <ip-address> <tcp-port>: try to establish a tcp connection to <ip-address> at port <tcp-port>. For example\r\n\t\tconnect 192.168.0.3 99999\r\nboth sides then report that the connection is indeed established.\r\n\r\n•\tshow: show all existing outgoing tcp connections in the following format:\r\nconn. ID |      IP       |     hostname       | local port | remote port\r\n-----------------------------------------------------------------------\r\n     1     | 192.168.0.1   | abc.cse.buffalo.edu  | 1234       | 1235\r\n     2     | 192.168.0.2   | def.cse.buffalo.edu  | 1453       | 98234\r\n     3     | 192.168.0.3   | ghi.cse.buffalo.edu  | 1233       | 09823\r\n     4     | 192.168.0.4   | xyz.cse.buffalo.edu  | 1235       | 0823\r\n\r\no\tsend <conn-id> <message>: send <message> to the connection whose id is <conn-id>. Here, <message> is the entire text (including blank spaces) that follows the first argument. For example,\r\n\t\tsend 3 Oh! This assignment is a piece of cake.\r\n\r\no\tsendto <ip-address> <udp-port> <message>: send <message> as a udp datagram to <ip-address> at <udp-poprt>.\r\n\r\no\tdisconnect <conn-id>: disconnect the tcp connection whose id is <conn-id>.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}